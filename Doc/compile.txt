# First make sure that the tool chain is downloaded from  https://github.com/raspberrypi/tools.git
mkdir build && cd build
cmake .. -DCMAKE_TOOLCHAIN_FILE=Toolchain-rpi.cmake
make

# Transfer the executable to the RasPi
# scp [source files] [user]@[host]:[path]
# Execute the exectuable remotely on RasPi
# ssh pi@raspberry ./CMakeHelloWorld


## For the raspberry pi Yocto you can genrate the SDK with following command
bitbake -c populate_sdk rpi-basic-image

Where, rpi-basic-image is the image generated by the command bitbake rpi-basic-image
Then go to the /tmp/deploy/sdk/ directory where you will find the corresponding build script


## Yocto toolchain file OEToolChainConfig.cmake
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR armv7-a)

set(TOOLCHAIN_PREFIX $ENV{SYSROOTS}/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-)
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)

set(CMAKE_SYSROOT $ENV{SYSROOTS}/cortexa7t2hf-neon-vfpv4-poky-linux-gnueabi)

set(CMAKE_PREFIX_PATH ${CMAKE_SYSROOT}/usr/lib/cmake)
#set(OE_QMAKE_PATH_EXTERNAL_HOST_BINS $ENV{QT_BIN_PATH})

set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(COMPILER_FLAGS " -march=armv7-a -marm -mfpu=neon  -mfloat-abi=hard -mcpu=cortex-a9")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMPILER_FLAGS}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMPILER_FLAGS}" CACHE STRING "" FORCE)


# This is the content of makefile

export SYSROOTS=/opt/poky/3.1+snapshot/sysroots

# cmake
DEBUG        = -DCMAKE_BUILD_TYPE=Debug
RELEASE      = -DCMAKE_BUILD_TYPE=RelWithDebInfo

# flags
PROJECT_FLAGS = -DCMAKE_TOOLCHAIN_FILE=CMake/Toolchain/OEToolchainConfig.cmake

# build directory
BUILD_DIR = build

.PHONY : help  
## ----------------------------------------------------------------------
## This is a help comment. It displays all the available targets.
## ----------------------------------------------------------------------

help: ## Show this help.
	@sed -ne '/@sed/!s/## //p' $(MAKEFILE_LIST)

cmake_project: ## Build the project
	mkdir -p $(BUILD_DIR) && \
	cd $(BUILD_DIR) && \
	cmake .. $(PROJECT_FLAGS) $(DEBUG) && \
    make
cmake_flash: ## Transfer exe
	 #scp $(BUILD_DIR)/main user@host:~/

cmake_systemd_service: ## Transfer service file
	chmod a+x create_systemd_service.sh  
	./create_systemd_service.sh
	ssh -t pi@192.168.178.30 "sudo systemctl stop myservice.service"
.PHONY: clean  
clean: ## Delete all build configurations
	rm -rf $(BUILD_DIR)
